<%= javascript_include_tag 'create_related_issue_plugin.js', :plugin => 'redmine_create_related_issue' %>

<%= call_hook(:view_issues_form_details_top, { :issue => @issue, :form => f }) %>

<div id="issue_descr_fields" <%= 'style="display:none"' unless @issue.new_record? || @issue.errors.any? %>>
<p><label><%= l(:label_project) %></label><%= @project %></p>
<p><%= f.select :tracker_id, @project.trackers.collect {|t| [t.name, t.id]}, :required => true %></p>
<%= observe_field :issue_tracker_id, :url => { :action => :new, :project_id => @project, :id => @issue },
                                     :update => :attributes,
                                     :with => "Form.serialize('issue-form')" %>

<p><%= f.text_field :subject, :size => 80, :required => true %></p>

<% if User.current.allowed_to?(:manage_subtasks, @project) %>
<p id="parent_issue"><%= f.text_field :parent_issue_id, :size => 10 %></p>
<div id="parent_issue_candidates" class="autocomplete"></div>
<%= javascript_tag "observeParentIssueField('#{auto_complete_issues_path(:id => @issue, :project_id => @project) }')" %>
<% end %>

<% f.fields_for :relation, @relation do |relation_form| %>

<p id="related_issue">
  <%= relation_form.select :relation_type, collection_for_relation_type_select, {:no_label => true}, {:onchange => "createRelatedIssuePlugin_setPredecessorFieldsVisibility();", :id => "createRelatedIssuePlugin_relation_type"} %>
  <%= l(:label_issue) %> #<%= relation_form.text_field :issue_to_id, {:label => l(:field_relation), :size => 10} %>
</p>

<p id="createRelatedIssuePlugin_predecessor_fields" style="display:none;">
  <%= l(:field_delay) %>:
  <%= relation_form.text_field :delay, {:no_label => true, :size => 3, :id => "createRelatedIssuePlugin_delay"} %>
  <%= l(:label_day_plural) %>
</p>

<% end %>

<%= javascript_tag "createRelatedIssuePlugin_setPredecessorFieldsVisibility();" %>

<p><%= f.text_area :description,
                   :cols => 60,
                   :rows => (@issue.description.blank? ? 10 : [[10, @issue.description.length / 50].max, 100].min),
                   :accesskey => accesskey(:edit),
                   :class => 'wiki-edit' %></p>
</div>

<div id="attributes" class="attributes">
	<%= render :partial => 'issues/attributes' %>
</div>

<% if @issue.new_record? %>
<p id="attachments_form"><%= label_tag('attachments[1][file]', l(:label_attachment_plural))%><%= render :partial => 'attachments/form' %></p>
<% end %>

<% if @issue.new_record? && User.current.allowed_to?(:add_issue_watchers, @project) -%>
<p id="watchers_form"><label><%= l(:label_issue_watchers) %></label>
<% @issue.project.users.sort.each do |user| -%>
<label class="floating"><%= check_box_tag 'issue[watcher_user_ids][]', user.id, @issue.watched_by?(user) %> <%=h user %></label>
<% end -%>
</p>
<% end %>

<%= call_hook(:view_issues_form_details_bottom, { :issue => @issue, :form => f }) %>

<%= wikitoolbar_for 'issue_description' %>
